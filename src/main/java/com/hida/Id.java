/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hida;

import java.util.Arrays;

/**
 * An object used to model every Id. By definition, each Id will have a unique
 * name associated with it. However, to determine uniqueness, each newly
 * created Id must be compared to previously existing Ids. 
 * 
 * Comparisons will be made by using Sets collection. Depending on which set is 
 * used, the Comparable interface and an overridden equals and hashCode methods 
 * were overridden to accommodate.
 * @author lruffin
 */
public class Id implements Comparable<Id> {

    // fields
    private int[] baseMap;
    private String tokenMap;
    private boolean isUnique = true;
    private final String PREFIX;

    /**
     * Copy constructor; primarily used to copy values of the baseMap from one
     * Id to another. 
     *
     * @param id - The Id to copy from.
     */
    public Id(Id id) {
        this.PREFIX = id.PREFIX;
        this.baseMap = Arrays.copyOf(id.getBaseMap(), id.getBaseMap().length);
        this.isUnique = id.isUnique;
        this.tokenMap = id.getTokenMap();
    }

    /**
     * Constructor used to create a new id
     * 
     * the length of baseMap and tokenMap must be the same, otherwise an 
     * IndexOutOfBoundsError will be thrown by the incrementId.
     * 
     * @param prefix - A prefix that will be attached to front of every name.
     * @param baseMap - Numerical representation of an Id
     * @param tokenMap - A mapping used to convert a baseMap into it's name. 
     */
    public Id(String prefix, int[] baseMap, String tokenMap) {
        this.baseMap = baseMap;
        this.tokenMap = tokenMap;
        this.PREFIX = prefix;
    }

    /**
     * Converts the baseMap into a String representation of this id's name. 
     * 
     * There is a one-to-one mapping of baseMap, dependent on a given tokenMap, 
     * to every possible name an Id can have.
     * @param baseMap - numerical representation of an id's name
     * @param tokenMap - mapping used to convert the baseMap into the name
     * @return - the name of an Id.
     */
    private static String convert(int[] baseMap, String tokenMap) {
        String charId = "";
        for (int i = 0; i < baseMap.length; i++) {
            charId += tokenMap.charAt(baseMap[i]);
        }
        return charId;
    }

    /**
     * incrementId is used to incrementally increase the value of an Id's
     * baseMap, all for the purpose of changing this Id's name.
     * 
     * @param baseMap - the baseMap used to be incremented
     * @param tokenMap - the mapping used to determine the range of each
     * index of a corresponding baseMap.
     * @return - True once the operation is finished and overflow has been
     * taken care of.
     */
    public static boolean incrementId(int[] baseMap, String tokenMap) {
        int range = baseMap.length - 1;

        boolean overflow = true;
        for (int k = 0; k < baseMap.length && overflow; k++) {
            // record value of current index
            int value = baseMap[range - k];

            if (value == tokenMap.length() - 1) {
                baseMap[range - k] = 0;
            } else {
                baseMap[range - k]++;
                overflow = false;
            }
        }

        return !overflow;
    }

    /**
     * Returns the string representation of this id. Also known as this id's
     * 'name'. 
     * @return 
     */
    @Override
    public String toString() {
        return PREFIX + convert(this.baseMap, this.tokenMap);
    }

    /**
     * Generated by contract because equals was overridden. Prime numbers
     * were chosen to lower the number of collisions. Increasing them to a 
     * higher prime number will lower collisions at the cost of run time. 
     *
     * @return
     */
    @Override
    public int hashCode() {
        // arbitrarily chosen prime numbers
        final int prime1 = 37;
        final int prime2 = 257;

        int hash = prime1 * prime2 + Arrays.hashCode(this.baseMap);
        return hash;
    }

    /**
     * Overridden so that id's can be identified solely by its baseName.
     * 
     * @param obj - the Object this id is being compared to
     * @return - true if the two Objects are the same.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Id)) {
            return false;
        }
        final Id paramId = (Id) obj;

        // equivalent to Arrays.hashCode(a) == Arrays.hashCode(b)
        return Arrays.equals(this.baseMap, paramId.baseMap);
    }

    /**
     * The baseMap is the numerical representation of this Id's name. Used in
     * conjunction with tokenMap to return the string representation of this
     * id's name in its toString method.
     *
     * @return - The array used to create the name
     */
    public int[] getBaseMap() {
        return baseMap;
    }

    /**
     * The baseMap is the numerical representation of this Id's name. Used in
     * conjunction with tokenMap to return the string representation of this
     * id's name in its toString method.
     *
     * Be warned that the array must have a unique address for it to work with
     * Sets. The length of the array must be equal to tokenMap, otherwise an
     * IndexOutOfBounds error will be thrown in the convert method.
     *
     * @param baseMap - The new array to replace the name.
     */
    public void setBaseMap(int[] baseMap) {
        this.baseMap = baseMap;
    }

    /**
     * Retrieves the objects tokenMap.
     *
     * The tokenMap is what is used to convert the baseMap into a string
     * represent
     *
     * @return - Id's tokenMap.
     */
    public String getTokenMap() {
        return tokenMap;
    }

    /**
     * Sets the tokenMap for this object.
     *
     * The tokenMap is what is used to convert the baseMap into a string
     * represent.
     *
     * An IndexOutOfBoundsException will be thrown by the convert method if the
     * length of the tokenMap is smaller than the baseMap.
     *
     * @param tokenMap - the new tokenMap
     */
    public void setTokenMap(String tokenMap) {
        this.tokenMap = tokenMap;
    }

    /**
     * Determines whether or not particular Id is not the first to be created
     * with it's particular baseMap.
     *
     * Returns true by default unless previously modified.
     *
     * @return
     */
    public boolean isUnique() {
        return isUnique;
    }

    /**
     * Determines whether or not particular Id is not the first to be created
     * with it's particular baseMap.
     *
     * Should only be used to set false whenever an it is determined that this
     * Id is not the first to have it's baseMap value.
     *
     * @param isUnique
     */
    public void setIsUnique(boolean isUnique) {
        this.isUnique = isUnique;
    }

    /**
     * Used to define the natural ordering of how id's should be listed. When
     * invoked, the two id's will be compared by their arrays as they represent
     * the names.
     *
     * @param t - second Id being compared.
     * @return - used to sort values in descending order.
     */
    @Override
    public int compareTo(Id t) {
        int[] t1Array = this.getBaseMap();
        int[] t2Array = t.getBaseMap();
        if (this.equals(t)) {
            return 0;
        } else {
            for (int i = 0; i < t1Array.length; i++) {
                // if the first Id has a smaller value than the second Id 
                if (t1Array[i] < t2Array[i]) {
                    return -1;
                } // if the first Id has a larger value than the second Id
                else if (t1Array[i] > t2Array[i]) {
                    return 1;
                }
            }
        }

        // if the arrays are equal
        return 0;
    }

}
